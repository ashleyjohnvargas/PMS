@{
    ViewData["Title"] = "Cozy Homes - Payments";
    Layout = "~/Views/Shared/_LayoutPM.cshtml";
}
@model List<ManagerPaymentDisplayModel> 
<!-- Replace with actual namespace -->


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Units Page</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
    <style>
        * {
            font-family: "Poppins", serif;
        }

        body {
            font-family: "Poppins", serif;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        .header {
            background-color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 20px;
        }

        .header h1 {
            color: black;
            margin: 0;
        }

        .header .add-unit {
            background-color: #B0836E;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
        }

        .units-list-header {
            background-color: #B0836E;
            color: white;
            text-align: left;
            padding: 10px 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .search-bar {
            margin: 20px;
            text-align: right;
        }

        .search-bar input[type="text"] {
            padding: 10px;
            width: 200px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .search-bar button {
            padding: 10px 15px;
            background-color: #B0836E;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }

        table th, table td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: center;
        }

        table th {
            background-color: #B0836E;
            color: white;
        }

        table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .pagination {
            text-align: right;
            margin: 20px 0;
        }

        .pagination button {
            background-color: #B0836E;
            color: white;
            border: none;
            padding: 10px 20px;
            margin: 0 5px;
            border-radius: 5px;
            cursor: pointer;
        }

        .action-icons i {
            cursor: pointer;
            margin: 0 5px;
        }

        .action-icons i.edit {
            color: #007bff;
        }

        .action-icons i.delete {
            color: #dc3545;
        }

        #manage-units-body {
            margin-right: 15px;
        }

        /* Style for text and icon (grouped together) */
        th span {
            display: flex;
            align-items: center; /* Keep icon aligned with text */
        }

        /* Sort icon placement and styles */
        th i {
            margin-left: auto; /* Push the icon to the far right */
            font-size: 0.9em;
            color: #aaa;
            padding-left: 4px;
            transition: color 0.2s ease;
        }

        /* Dropdown styling */
        th select {
            margin-left: 10px; /* Space between the icon and the dropdown */
            padding: 4px 6px;
            font-size: 0.9em;
            border: 1px solid #ccc;
            border-radius: 4px;
            background-color: #fff;
        }

        /* Hover effect for headers */
        th:hover i {
            color: #555; /* Darker color for sort icon on hover */
        }

        /* Active sorting icon colors */
        .fas.fa-sort-up {
            color: #2c89d9; /* Blue for ascending */
        }

        .fas.fa-sort-down {
            color: #d9534f; /* Red for descending */
        }


    </style>
</head>


<body id="manage-units-body">
    @if (TempData["ShowPopup"] != null && (bool)TempData["ShowPopup"])
    {
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                Swal.fire({
                    title: 'Success!',
                    text: '@TempData["PopupMessage"]',
                    icon: 'success',
                    confirmButtonText: 'OK'
                });
            });
        </script>
    }
    <div class="header" style="margin-top: 50px; padding: 10px 0;">

        @* <h1 style="color: #B0836E;">Leases</h1> *@
        @*         <a asp-action="AddUnitPage" style="text-decoration: none;background-color: #B0836E;color: white;padding: 10px 20px;border-radius: 10px;">Add Lease</a>
        *@
    </div>

    <div class="units-list-header">
        @* <a asp-action="PMManageLease">
        <i class="fas fa-arrow-left" style="font-size: 24px; color: white;"></i>
        </a>
        *@
        <h2>Payments</h2>
    </div>

    <div class="search-bar" style="margin: 20px 0;">
        <input type="text" placeholder="Search payments..." id="searchInput">
        <button class="search-unit-button" onclick="searchPayments()"><i class="fas fa-search"></i></button>
    </div>
   

    <table id="paymentsList" data-sort-column="" data-sort-order="">
        <thead>
            <tr>
                <th onclick="sortTable(0)">#</th>
                <th onclick="sortTable(1)"><span>Tenant<i class="fas fa-sort"></i></span></th>
                <th onclick="sortTable(2)"><span>Amount<i class="fas fa-sort"></i></span></th>
                <th onclick="sortTable(3)"><span>Unit<i class="fas fa-sort"></i></span></th>
                <th onclick="sortTable(4)"><span>Monthly Rent<i class="fas fa-sort"></i></span></th>
                <th onclick="sortTable(5)"><span>Date<i class="fas fa-sort"></i></span></th>
                <th onclick="sortTable(6)"><span>Payment Method
                        <select id="paymentFilter" onchange="filterPayments()">
                            <option value="">All</option>
                            <option value="Card">Card</option>
                            <option value="E-Wallet">E-Wallet</option>
                            <option value="Over the Counter">Over the Counter</option>
                        </select>
                    
                    <i class="fas fa-sort"></i></span></th> <!--Add Filter Options: Card, E-Wallet, Over the Counter-->
                <th>View Invoice</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Any())
            {
                int index = 1;
                foreach (var payment in Model)
                {
                    <tr class="payment-row" data-payment-method="@payment.PaymentMethod">
                        <td>@index</td>
                        <td>@payment.TenantFullName</td>
                        <td>@String.Format("{0:C}", payment.Amount).Replace("$", "₱")</td>
                        <td>@payment.UnitName</td>
                        <td>@String.Format("{0:C}", payment.MonthlyRent).Replace("$", "₱")</td>
                        <td>@payment.PaymentDate</td>
                        <td>@payment.PaymentMethod</td>
                        <td>
                            <a asp-action="ManagerPreviewInvoice" asp-route-id="@payment.PaymentId" style="padding: 5px 12px;background-color: #B0836E;color: white;border-radius: 5px; cursor: pointer; text-decoration: none;">
                                Receipt
                            </a>
                        </td>
                    </tr>
                    index++;
                }
            }
            else
            {
                <tr>
                    <td colspan="9" style="text-align:center;">No payments found.</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination" style="margin: 20px 0 200px;">
        <button>Previous</button>
        <button style="margin: 0 0 0 5px;">Next</button>
    </div>


    <script>
        document.getElementById("searchInput").addEventListener("keyup", searchPayments);

        // Function to search payments
        function searchPayments() {
            const searchTerm = document.getElementById("searchInput").value.toLowerCase();
            const paymentRows = document.querySelectorAll(".payment-row");

            paymentRows.forEach(function(row) {
                const tenantName = row.cells[1].textContent.toLowerCase();
                const paymentMethod = row.cells[6].textContent.toLowerCase();

                // Show/hide row based on search input and payment method filter
                if (tenantName.includes(searchTerm) && (row.style.display !== 'none')) {
                    row.style.display = "table-row";
                } else {
                    row.style.display = "none";
                }
            });
        }

        // Function to filter payments by payment method
        function filterPayments() {
            const filterValue = document.getElementById("paymentFilter").value.toLowerCase();
            const paymentRows = document.querySelectorAll(".payment-row");

            paymentRows.forEach(function(row) {
                const paymentMethod = row.getAttribute("data-payment-method").toLowerCase();

                if (filterValue === "" || paymentMethod === filterValue) {
                    row.style.display = "table-row";
                } else {
                    row.style.display = "none";
                }
            });

            searchPayments(); // Ensure search also applies after filtering
        }

        // Optional: Enable search on "Enter" key press
        document.getElementById("searchInput").addEventListener("keypress", function(e) {
            if (e.key === "Enter") {
                searchPayments();
            }
        });

        function sortTable(columnIndex) {
            const table = document.getElementById("paymentsList");
            const rows = Array.from(table.tBodies[0].rows); // Get rows from tbody
            let ascending = true; // Initial sort order

            // Toggle ascending/descending if already sorted
            if (table.dataset.sortColumn == columnIndex) {
                ascending = table.dataset.sortOrder === "asc" ? false : true;
            }

            // Store the current sort column and order
            table.dataset.sortColumn = columnIndex;
            table.dataset.sortOrder = ascending ? "asc" : "desc";

            // Sort rows
            rows.sort((rowA, rowB) => {
                const cellA = rowA.cells[columnIndex].textContent.trim().toLowerCase();
                const cellB = rowB.cells[columnIndex].textContent.trim().toLowerCase();

                if (cellA < cellB) return ascending ? -1 : 1;
                if (cellA > cellB) return ascending ? 1 : -1;
                return 0;
            });

            // Re-append sorted rows to tbody
            const tbody = table.tBodies[0];
            tbody.innerHTML = "";
            rows.forEach(row => tbody.appendChild(row));
        }
    </script>
</body>
</html>


