@{
    ViewData["Title"] = "Cozy Homes - Units";
    Layout = "~/Views/Shared/_LayoutPM.cshtml";
}
@model List<PMS.Models.StaffViewModel>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Units Page</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
    <style>
        * {
            font-family: "Poppins", serif;
        }

        body {
            font-family: "Poppins", serif;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        .header {
            background-color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 20px;
        }

            .header h1 {
                color: black;
                margin: 0;
            }

            .header .add-unit {
                background-color: #B0836E;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                cursor: pointer;
            }

        .units-list-header {
            background-color: #B0836E;
            color: white;
            text-align: left;
            padding: 10px 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .search-bar {
            margin: 20px;
            text-align: right;
        }

            .search-bar input[type="text"] {
                padding: 10px;
                width: 200px;
                border: 1px solid #ccc;
                border-radius: 5px;
            }

            .search-bar button {
                padding: 10px 15px;
                background-color: #B0836E;
                color: white;
                border: none;
                border-radius: 5px;
                cursor: pointer;
            }

        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }

            table th, table td {
                border: 1px solid #ddd;
                padding: 10px;
                text-align: center;
            }

            table th {
                background-color: #B0836E;
                color: white;
            }

            table tr:nth-child(even) {
                background-color: #f9f9f9;
            }



            /* Styling for dropdown filters */
            #staffList thead select {
                border: 1px solid #ccc;
                border-radius: 4px;
                padding: 4px 8px;
                font-size: 14px;
                color: #333;
                background-color: #f9f9f9;
                cursor: pointer;
                width: 100%;
                box-sizing: border-box;
            }

            /* Highlight dropdown on hover or focus */
            #staffList thead select:hover,
            #staffList thead select:focus {
                border-color: #007bff;
                outline: none;
                background-color: #eef7ff;
            }

/* Style for text and icon (grouped together) */
th span {
    display: flex;
    align-items: center; /* Keep icon aligned with text */
}

/* Sort icon placement and styles */
th i {
    margin-left: auto; /* Push the icon to the far right */
    font-size: 0.9em;
    color: #aaa;
    padding-left: 4px;
    transition: color 0.2s ease;
}

/* Dropdown styling */
th select {
    margin-left: 10px; /* Space between the icon and the dropdown */
    padding: 4px 6px;
    font-size: 0.9em;
    border: 1px solid #ccc;
    border-radius: 4px;
    background-color: #fff;
}

/* Hover effect for headers */
th:hover i {
    color: #555; /* Darker color for sort icon on hover */
}

/* Active sorting icon colors */
.fas.fa-sort-up {
    color: #2c89d9; /* Blue for ascending */
}

.fas.fa-sort-down {
    color: #d9534f; /* Red for descending */
}

        .pagination {
            text-align: right;
            margin: 20px 0;
        }

            .pagination button {
                background-color: #B0836E;
                color: white;
                border: none;
                padding: 10px 20px;
                margin: 0 5px;
                border-radius: 5px;
                cursor: pointer;
            }
             .pagination button.active {
            background-color: #B0836E;
            color: white;
        }
        .action-icons i {
            cursor: pointer;
            margin: 0 5px;
        }

            .action-icons i.edit {
                color: #007bff;
            }

            .action-icons i.delete {
                color: #dc3545;
            }

        #manage-units-body {
            margin-right: 15px;
        }
    </style>
</head>

<body id="manage-units-body">
    @if (TempData["ShowPopup"] != null && (bool)TempData["ShowPopup"])
    {
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                Swal.fire({
                    title: '@TempData["PopupTitle"]',  // Set the title dynamically
                    text: '@TempData["PopupMessage"]', // Set the message dynamically
                    icon: '@TempData["PopupIcon"]',    // Set the icon dynamically (success, error, warning, info)
                    confirmButtonText: 'OK'
                });
            });
        </script>
    }

    <div class="header" style="margin-top: 20px; padding: 10px 0;">

        @* <h1 style="color: #B0836E;">Leases</h1> *@
        @*         <a asp-action="AddUnitPage" style="text-decoration: none;background-color: #B0836E;color: white;padding: 10px 20px;border-radius: 10px;">Add Lease</a>
        *@
    </div>

    <div class="units-list-header">
        <h2>Staff</h2>
        <a id="addStaffBtn" style="text-decoration: none;background-color: white;color: #B0836E;padding: 10px 20px;border-radius: 10px; font-weight: 600; cursor: pointer;">Add Staff</a>
    </div>

    <div class="search-bar" style="margin: 20px 0; display: flex; justify-content: flex-start; align-items: center;">
    <!-- Export buttons aligned to the left -->
    <div class="search-container" style="display: flex; gap: 10px;">
        <button class="search-button" onclick="exportToPDF()">Export to PDF</button>
        <button class="search-button" onclick="exportToCSV()">Export to CSV</button>
    </div>

    <!-- Spacer between buttons and search input -->
    <div style="flex-grow: 1;"></div>

    <!-- Search input and search button (aligned to the right) -->
    <input type="text" placeholder="Search tenant..." id="searchTenantInput" style="margin-right: 10px;">
        <button class="search-unit-button" onclick="searchStaff()"><i class="fas fa-search"></i></button>
</div>

   
  
  
<table id="staffList" class="staff-table" data-sort-column="" data-sort-order="">
    <thead>
        <tr>
            <th onclick="sortTable(0)">#</th>
            <th  onclick="sortTable(1)">    
                <span>Staff<i class="fas fa-sort"></i></span>
            </th>
            <th onclick="sortTable(2)">
                
                <span>Role
                <select id="filterRole" onchange="filterStaff()">
                    <option value="">All</option>
                    <option value="Technician">Technician</option>
                    <option value="Electrician">Electrician</option>
                    <option value="Plumber">Plumber</option>
                    <option value="Carpenter">Carpenter</option>
                    <option value="IT Technician">IT Technician</option>
                </select>  <i class="fas fa-sort"></i></span>

            </th>
            <th onclick="sortTable(3)">
                <span>Shift
                <select id="filterShift" onchange="filterStaff()">
                    <option value="">All</option>
                    <option value="First">First</option>
                    <option value="Second">Second</option>
                    <option value="Third">Third</option>
                </select>  <i class="fas fa-sort"></i> </span>
            </th>
            <th onclick="sortTable(4)">
                <span>Availability
                <select id="filterAvailability" onchange="filterStaff()">
                    <option value="">All</option>
                    <option value="Available">Available</option>
                    <option value="Occupied">Occupied</option>
                </select>
                <i class="fas fa-sort"></i> </span>
            </th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @if (Model != null && Model.Any())
        {
            int index = 1;
            foreach (var staff in Model)
            {
                <tr class="staff-item" data-role="@staff.StaffRole" data-shift="@staff.Shift" data-availability="@staff.Availability">
                    <td>@index</td>
                    <td>@staff.StaffName</td>
                    <td>@staff.StaffRole</td>
                    <td>@staff.Shift</td>
                    <td>@staff.Availability</td>
                    <td class="action-icons">
                        <a asp-action="DeleteStaff" asp-route-id="@staff.StaffID" onclick="return confirmDelete(@staff.StaffID)">
                            <i class="fas fa-trash delete"></i>
                        </a>
                    </td>
                </tr>
                index++;
            }
        }
        else
        {
            <tr>
                <td colspan="6" style="text-align:center;">No staff found.</td>
            </tr>
        }
    </tbody>
</table>



<script>
    function filterStaff() {
        const roleFilter = document.getElementById("filterRole").value.toLowerCase();
        const shiftFilter = document.getElementById("filterShift").value.toLowerCase();
        const availabilityFilter = document.getElementById("filterAvailability").value.toLowerCase();

        const rows = document.querySelectorAll("#staffList tbody tr.staff-item");

        // Map shifts for display
        const shiftMap = {
            "first": "first",
            "second": "second",
            "third": "third"
        };

        rows.forEach(row => {
            const role = row.getAttribute("data-role").toLowerCase();
            const shift = row.getAttribute("data-shift").toLowerCase();
            const availability = row.getAttribute("data-availability").toLowerCase();

            // Match the shift filter using the mapped display value
            const mappedShift = shiftMap[shift] || shift;

            if (
                (roleFilter === "" || role.includes(roleFilter)) &&
                (shiftFilter === "" || mappedShift.includes(shiftFilter)) &&
                (availabilityFilter === "" || availability.includes(availabilityFilter))
            ) {
                row.style.display = ""; // Show the row
            } else {
                row.style.display = "none"; // Hide the row
            }
        });
    }
    
    document.getElementById("searchStaffInput").addEventListener("keyup", searchStaff);

    function searchStaff() {

    // Get the search input value
    const searchInput = document.getElementById("searchStaffInput").value.toLowerCase();

    // Get all staff table rows
    const staffRows = document.querySelectorAll("#staffList tbody tr.staff-item");

    // Loop through each row and check if it matches the search input
    staffRows.forEach((row) => {
        const staffName = row.querySelector("td:nth-child(2)").textContent.toLowerCase();
        if (staffName.includes(searchInput)) {
            row.style.display = ""; // Show row if it matches
        } else {
            row.style.display = "none"; // Hide row if it doesn't match
        }
    });
}

//sort table
function sortTable(columnIndex) {
    const table = document.getElementById("staffList");
    const rows = Array.from(table.tBodies[0].rows); // Get rows from tbody
    let ascending = true; // Initial sort order

    // Toggle ascending/descending if already sorted
    if (table.dataset.sortColumn == columnIndex) {
        ascending = table.dataset.sortOrder === "asc" ? false : true;
    }

    // Store the current sort column and order
    table.dataset.sortColumn = columnIndex;
    table.dataset.sortOrder = ascending ? "asc" : "desc";

    // Sort rows
    rows.sort((rowA, rowB) => {
        const cellA = rowA.cells[columnIndex].textContent.trim().toLowerCase();
        const cellB = rowB.cells[columnIndex].textContent.trim().toLowerCase();

        if (cellA < cellB) return ascending ? -1 : 1;
        if (cellA > cellB) return ascending ? 1 : -1;
        return 0;
    });

    // Re-append sorted rows to tbody
    const tbody = table.tBodies[0];
    tbody.innerHTML = "";
    rows.forEach(row => tbody.appendChild(row));
}

</script>
        



    <div class="pagination" style="margin: 20px 0 200px;">
        <button>Previous</button>
        <button style="margin: 0 0 0 5px;">Next</button>
    </div>
    

    <script>
       
        // Search function
        function searchStaff() {
            const searchInput = document.getElementById("searchStaffInput").value.toLowerCase();
            const rows = document.querySelectorAll("#staffList tbody tr.staff-item");
            rows.forEach((row) => {
                const staffName = row.querySelector("td:nth-child(2)").textContent.toLowerCase();
                row.style.display = staffName.includes(searchInput) ? "" : "none";
            });
            paginate(); // Re-paginate after search
        }

        // Filter function
        function filterStaff() {
            const role = document.getElementById("filterRole").value;
            const shift = document.getElementById("filterShift").value;
            const availability = document.getElementById("filterAvailability").value;

            const rows = document.querySelectorAll("#staffList tbody tr.staff-item");
            rows.forEach((row) => {
                const rowRole = row.getAttribute("data-role");
                const rowShift = row.getAttribute("data-shift");
                const rowAvailability = row.getAttribute("data-availability");

                const matches = 
                    (role === "" || role === rowRole) &&
                    (shift === "" || shift === rowShift) &&
                    (availability === "" || availability === rowAvailability);

                row.style.display = matches ? "" : "none";
            });
        }

        

        // Export to CSV
        function exportToCSV() {
            const rows = Array.from(document.querySelectorAll("#staffList tbody tr.staff-item"));
            const csvData = [["#", "Staff", "Role", "Shift", "Availability"]];

            rows.forEach((row) => {
                if (row.style.display !== "none") {
                    const cells = Array.from(row.querySelectorAll("td")).map(td => td.textContent.trim());
                    csvData.push(cells);
                }
            });

            const csvContent = csvData.map(row => row.join(",")).join("\n");
            const blob = new Blob([csvContent], { type: "text/csv" });
            const url = URL.createObjectURL(blob);

            const a = document.createElement("a");
            a.href = url;
            a.download = "staff_list.csv";
            a.click();
            URL.revokeObjectURL(url);
        }

        // Export to PDF Functionality
    function exportToPDF() {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();
        const table = document.querySelector('#staffList');

        const rows = Array.from(table.rows).map(row => {
            return Array.from(row.cells).map(cell => cell.innerText);
        });

        const headers = rows.shift(); // Remove the header row

        doc.autoTable({
            head: [headers],
            body: rows,
            startY: 20,
            margin: { horizontal: 10 },
        });

        doc.save('staff.pdf');
    }


        // Initialize
        document.addEventListener("DOMContentLoaded", () => {
            paginate();
        });
    </script>




    <!-- Add Staff Modal -->
    <div id="addStaffModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 9999; justify-content: center; align-items: center;">
        <div style="background-color: white; padding: 20px; border-radius: 10px; width: 400px;">
            <h3>Add Staff</h3>
            <form asp-action="AddStaff" method="post" id="addStaffForm" >
                <div style="display: flex;">
                    <label for="firstName" style="flex:1;">First Name</label>
                    <input type="text" id="firstName" name="FirstName" style="flex:1;" required>
                </div>
                <div style="display: flex;">
                    <label for="lastName" style="flex:1;">Last Name</label>
                    <input type="text" id="lastName" name="LastName" style="flex:1;" required>
                </div style="display: flex;">
                <div style="display: flex;">
                    <label for="email" style="flex:1;">Email Address</label>
                    <input type="email" id="email" name="Email" style="flex:1;" required>
                </div>
                <div style="display: flex;">
                    <label for="password" style="flex:1;">Temporary Password</label>
                    <input type="password" id="password" name="Password" style="flex:1;" required>
                </div>
                <div style="display: flex;">
                    <label for="role" style="flex:1;">Role</label>
                    <select id="role" name="Role" style="flex:1;" required>
                        <option value="">Select Role</option>
                        <option value="Electrician">Electrician</option>
                        <option value="Technician">Technician</option>
                        <option value="Plumber">Plumber</option>
                        <option value="Carpenter">Carpenter</option>
                        <option value="IT Technician">IT Technician</option>
                    </select>
                </div>
                <div style="display: flex;">
                    <label for="shift" style="flex:1;">Shift</label>
                    <select id="shift" name="Shift" style="flex:1;" required>
                        <option value="">Select Shift</option>
                        <option value="First">First</option>
                        <option value="Second">Second</option>
                        <option value="Third">Third</option>
                    </select>
                </div>
                <button type="submit" id="submitStaffBtn" style="margin-top: 10px;">Add Staff</button>
                <button type="button" id="closeModalBtn" style="margin-top: 10px;">Cancel</button>
            </form>
        </div>
    </div>

    <script>

         // Function to search staff
    function searchStaff() {
        // Get the search term
        const searchTerm = document.getElementById("searchStaffInput").value.toLowerCase();
        
        // Get all staff rows
        const staffRows = document.querySelectorAll("#staffList .staff-item");

        // Loop through each staff row
        staffRows.forEach(function(row) {
            // Get the staff's name from the data-name attribute
            const staffName = row.getAttribute("data-name").toLowerCase();
            
            if (staffName.includes(searchTerm)) {
                // If it matches, show the row
                row.style.display = "table-row";
            } else {
                // Otherwise, hide it
                row.style.display = "none";
            }
        });
    }

    // Optional: Enable search on "Enter" key press
    document.getElementById("searchStaffInput").addEventListener("keypress", function(e) {
        if (e.key === "Enter") {
            searchStaff();
        }
    });
        // JavaScript function to handle the delete confirmation
    function confirmDelete(managerId) {
        // Show a confirmation dialog
        return confirm("Are you sure you want to delete this manager?");
    }
        // Show the modal
        document.getElementById("addStaffBtn").addEventListener("click", function () {
            document.getElementById("addStaffModal").style.display = "flex";
        });

        // Close the modal
        document.getElementById("closeModalBtn").addEventListener("click", function () {
            document.getElementById("addStaffModal").style.display = "none";
        });

        // Form submission and validation
        document.getElementById("submitStaffBtn").addEventListener("click", function () {
            const firstName = document.getElementById("firstName").value.trim();
            const lastName = document.getElementById("lastName").value.trim();
            const email = document.getElementById("email").value.trim();
            const password = document.getElementById("password").value.trim();
            const role = document.getElementById("role").value;
            const shift = document.getElementById("shift").value;

            if (!firstName || !lastName || !email || !password || !role || !shift) {
                alert("All fields are required!");
                return;
            }

            // // Submit form data here (e.g., via AJAX or form submission)
            // alert("Staff added successfully!");

            // // Close the modal and reset form
            // document.getElementById("addStaffModal").style.display = "none";
            // document.getElementById("addStaffForm").reset();
        });
    </script>

    </body>
</html>






